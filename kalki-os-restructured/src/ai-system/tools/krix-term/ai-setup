#!/bin/bash

# Krix-Term AI Setup
# Handles the AI component installation and configuration

# Configuration
CONFIG_DIR="$HOME/.config/krix-term"
LOG_FILE="$CONFIG_DIR/ai-setup.log"
STATUS_FILE="$CONFIG_DIR/ai-status.json"
AI_INSTALL_DIR="$HOME/ai-tools"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# Log function
log() {
    echo -e "$1" | tee -a "$LOG_FILE"
}

# Update status
update_status() {
    local status=$1
    local message="${2:-$1}"
    echo "{\"status\":\"$status\",\"message\":\"$message\",\"timestamp\":\"$(date +%s)\"}" > "$STATUS_FILE"
}

# Show header
show_header() {
    clear
    echo -e "${GREEN}╔══════════════════════════════════════════════════╗"
    echo -e "║          Krix-Term AI Setup - Dharma OS          ║"
    echo -e "╚══════════════════════════════════════════════════╝${NC}"
    echo
}

# Check for root privileges
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        log "${RED}Error: This operation requires root privileges.${NC}"
        log "Please run with sudo or as root."
        exit 1
    fi
}

# Install AI components
install_ai_components() {
    show_header
    log "${YELLOW}Starting AI component installation...${NC}"
    
    # Update status to installing
    update_status "installing" "Installing AI components..."
    
    # Check if AI tools directory exists
    if [ ! -d "$AI_INSTALL_DIR" ]; then
        log "${RED}Error: AI tools directory not found at $AI_INSTALL_DIR${NC}"
        update_status "error" "AI tools directory not found"
        exit 1
    fi
    
    # Run the installation script
    log "Running AI installation script..."
    if ! "$AI_INSTALL_DIR/install-ai-foundation.sh" 2>&1 | tee -a "$LOG_FILE"; then
        log "${RED}Error: Failed to install AI components${NC}"
        update_status "error" "Installation failed. Check $LOG_FILE"
        exit 1
    fi
    
    # Update status to ready
    update_status "ready" "AI components successfully installed"
    log "${GREEN}✓ AI components installed successfully!${NC}"
}

# Check installation status
check_status() {
    if [ ! -f "$STATUS_FILE" ]; then
        echo "not_configured"
        return
    fi
    
    local status=$(jq -r '.status' "$STATUS_FILE" 2>/dev/null || echo "error")
    echo "$status"
}

# Show status
show_status() {
    local status=$(check_status)
    
    show_header
    
    case "$status" in
        "not_configured")
            echo -e "${YELLOW}AI Components: Not Configured${NC}"
            echo "The AI components have not been set up yet."
            ;;
        "installing")
            echo -e "${YELLOW}AI Components: Installation In Progress${NC}"
            echo "The AI components are currently being installed."
            echo "Please wait for the process to complete."
            ;;
        "ready")
            echo -e "${GREEN}AI Components: Ready${NC}"
            echo "The AI components are installed and ready to use."
            ;;
        "error")
            local error_msg=$(jq -r '.message' "$STATUS_FILE" 2>/dev/null || echo "Unknown error")
            echo -e "${RED}AI Components: Error${NC}"
            echo "Error: $error_msg"
            ;;
        *)
            echo -e "${YELLOW}AI Components: Unknown Status${NC}"
            echo "Unable to determine AI component status."
            ;;
    esac
    
    echo
    echo "For more details, see: $LOG_FILE"
}

# Main function
main() {
    case "$1" in
        "--install")
            check_root
            install_ai_components
            ;;
        "--status")
            show_status
            ;;
        "--help" | "-h" | "")
            show_header
            echo "Usage: ai-setup [OPTION]"
            echo
            echo "Options:"
            echo "  --install   Install AI components (requires root)"
            echo "  --status    Show current installation status"
            echo "  --help      Show this help message"
            ;;
        *)
            echo "Unknown option: $1"
            echo "Try 'ai-setup --help' for more information."
            exit 1
            ;;
    esac
}

# Start the application
main "$@"
